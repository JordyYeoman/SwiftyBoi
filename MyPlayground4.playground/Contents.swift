//// Run using macOS as platform
//
//func determineHigherValue<T: Comparable>(valueOne: T, valueTwo: T) {
//    let higherValue = valueOne > valueTwo ? valueOne : valueTwo
//    print("\(higherValue) is the higher value")
//}
//
//determineHigherValue(valueOne: 3, valueTwo: 8)
//determineHigherValue(valueOne: 21, valueTwo: 8)
//
//enum PasswordError: Error {
//    case short, obvious
//}
//
//func checkPassword(_ password: String) throws -> String {
//    if password.count < 5 {
//        throw PasswordError.short
//    }
//    
//    if password == "12345" {
//        throw PasswordError.obvious
//    }
//    
//    if password.count < 10 {
//        return "Ok"
//    } else {
//        return "Good"
//    }
//}
//
//do {
//    let result = try checkPassword("123451111")
//    print("Rating: \(result)")
//} catch PasswordError.obvious {
//    print("I have the same combination on my luggage!")
//} catch {
//    print("There was an error.")
//}
//
//// Closures
//let sayHello = { (name: String) -> String in
//    print("Hi there, \(name)")
//    return ""
//}
//
//sayHello("Jordy")

let team = ["Jordy", "Jiang", "Gwen", "Max", "Tom"]

// Lenghty version
let onlyJ = team.filter({ (name: String) -> Bool in
    return name.hasPrefix("J")
})
// Shortened version, but same as above.
// Spicy trailing closure syntax
let onlyJ2 = team.filter { $0.hasPrefix("J") }

print(onlyJ)
print(onlyJ2)

// Property Observers
struct Game {
    var score = 0 {
        didSet {
            print("Score is now \(score)")
        }
        willSet {
            print("CurrentScore: \(score), New score is: \(newValue)")
        }
    }
}

var game = Game()
game.score += 10
game.score -= 3
game.score += 3
game.score -= 11

// Initializers
// Structs can have auto initializers generated by swift, called `memberwise initalizers`,
// However we can also have our own initalizers

struct Player {
    let name: String
    let number: Int
    
    // Type is implicity returned for struct inits
    init(name: String) {
        self.name = name
        self.number = Int.random(in: 1...99)
    }
}

let j = Player(name: "Jordy")
print(j)

// Access Control
// Private - let nothing outside the struct, read or write to this
// Private Set - Can be read outside the struct, but not written to outside.
// File Private - Anything inside the current file can read/write
// Public - Anything anywhere can read / write

struct BankAccount {
    private(set) var funds = 0
    
    mutating func deposit(amount: Int) {
        funds += amount
    }
    
    mutating func withdraw(amount: Int) -> Int {
        if funds > amount {
            funds -= amount
            return amount
        } else {
            return amount
        }
    }
}

var account = BankAccount(funds: 9421)
print(account.funds)
account.deposit(amount: 1200)
print(account.funds)

// Static properties and methods
struct AppData {
    static let version = "1.3 Beta-2"
    static let settingsFile = "settings.json"
}

print(AppData.version)

class Employee {
    let hours: Float
    
    init(hours: Float) {
        self.hours = 1.13 * hours
    }
    
    func printSummary() {
        print("I work \(hours) hours a day.")
    }
}

class Developer: Employee {
    func work() {
        print("I'm coding for \(hours) hours per day.")
    }
    
    // If we want to re-implemenet an already implemented class function, we must use `override`
    override func printSummary() {
        print("I fight android studio for \(hours) a day.")
    }
}

extension Int {
    var plusOne: Self { self + 1 }
}

let x = 1
x.plusOne

let jordy = Developer(hours: 9.23)
jordy.work()
jordy.printSummary()

struct Wheels {
    var size: Int
    var width: Int
}

class Car {
    var wheels: Wheels
    var model: String
    var make: String
    var year: Int
    
    init(wheels: Wheels, model: String, make: String, year: Int) {
        self.wheels = wheels
        self.model = model
        self.make = make
        self.year = year
    }
}

let car = Car(wheels: Wheels(size: 16, width: 33), model: "Landcruiser", make: "Toyota", year: 1997)
var car2 = car
car2.wheels = Wheels(size: 17, width: 37)
var car2Wheels = car.wheels
//car2Wheels = Wheels(size: 17, width: 37)

print(car)
print(car2)
print(car2Wheels)
